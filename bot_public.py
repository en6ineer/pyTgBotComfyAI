import logging
import requests
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler,
)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
API_TOKEN = "YOUR_TOKEN_FOR_COMFYAI"
WORKFLOW_ID = "ID"
BASE_URL = "https://api.comfyonline.app/api"
PROMPT_DEFAULT = "The pair of images highlights a clothing and its styling on a model, high resolution, 4K, 8K; [IMAGE1] Detailed product shot of a clothing [IMAGE2] The same cloth is worn by a model in a lifestyle setting. Dress these clothes on the model, if you need to stretch in size. If these are trousers, then put them on the bottom of the body. Recognize for the top this clothing or for the bottom."

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
PHOTO_MODEL, PHOTO_CLOTHES, TEXT_PROMPT = range(3)

# --- –õ–æ–≥–≥–∏–Ω–≥ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üëó –ü—Ä–∏–º–µ—Ä–∏—Ç—å –æ–¥–µ–∂–¥—É", callback_data="try_on")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "try_on":
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏ (—á–µ–ª–æ–≤–µ–∫–∞).")
        return PHOTO_MODEL


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏ ---
async def handle_model_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = await update.message.photo[-1].get_file()
    model_path = f"model_{update.message.from_user.id}.jpg"
    await photo_file.download_to_drive(model_path)
    context.user_data["model_path"] = model_path

    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã.")
    return PHOTO_CLOTHES


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã ---
async def handle_clothes_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = await update.message.photo[-1].get_file()
    clothes_path = f"clothes_{update.message.from_user.id}.jpg"
    await photo_file.download_to_drive(clothes_path)
    context.user_data["clothes_path"] = clothes_path

    await update.message.reply_text(
        "–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: realistic look). –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
    )
    return TEXT_PROMPT


# --- –ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ ---
async def skip_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["prompt"] = PROMPT_DEFAULT
    return await send_to_api(update, context)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ---
async def handle_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["prompt"] = update.message.text
    return await send_to_api(update, context)


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API comfyAI ---
async def send_to_api(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import base64
    import time

    user_id = update.message.from_user.id
    model_path = context.user_data["model_path"]
    clothes_path = context.user_data["clothes_path"]
    prompt = context.user_data["prompt"]

    # --- –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64 ---
    def encode_image_base64(file_path):
        try:
            with open(file_path, "rb") as f:
                encoded = base64.b64encode(f.read()).decode("utf-8")
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {file_path} –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ base64.")
            return f"data:image/jpeg;base64,{encoded}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ {file_path}: {e}")
            return None

    model_b64 = encode_image_base64(model_path)
    clothes_b64 = encode_image_base64(clothes_path)

    if not model_b64 or not clothes_b64:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return ConversationHandler.END

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ---
    payload = {
        "workflow_id": WORKFLOW_ID,
        "input": {
            "CLIPTextEncode_text_6": prompt,
            "LoadImage_image_45": clothes_b64,
            "LoadImage_image_95": model_b64,
        },
    }

    print("\n=== üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ comfyAI ===")
    print("üì§ Payload:", payload)

    try:
        res = requests.post(
            f"{BASE_URL}/run_workflow",
            json=payload,
            headers={
                "Authorization": f"Bearer {API_TOKEN}",
                "Content-Type": "application/json"
            },
        )
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ comfyAI:", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É comfyAI.")
        return ConversationHandler.END

    if res.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ run_workflow: {res.status_code}, –æ—Ç–≤–µ—Ç: {res.text}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏ üòî")
        return ConversationHandler.END

    task_response = res.json()
    print("üì© –û—Ç–≤–µ—Ç –æ—Ç run_workflow:", task_response)
    task_id = task_response.get("data", {}).get("task_id")

    if not task_id:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å task_id –æ—Ç comfyAI.")
        return ConversationHandler.END

    await update.message.reply_text("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (–¥–æ 30 —Å–µ–∫) ---
    start_time = time.time()
    timeout = 300  # —Å–µ–∫—É–Ω–¥

    while time.time() - start_time < timeout:
        print(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞... (–ø—Ä–æ—à–ª–æ {int(time.time() - start_time)} —Å–µ–∫)")
        time.sleep(60)

        try:
            status_res = requests.post(
                f"{BASE_URL}/query_run_workflow_status",
                json={"task_id": task_id},
                headers={"Authorization": f"Bearer {API_TOKEN}"},
            )
            data = status_res.json()
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:", e)
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.")
            return ConversationHandler.END

        print("üì• –û—Ç–≤–µ—Ç –æ—Ç comfyAI (query_run_workflow_status):", data)

        status = data.get("status") or data.get("data", {}).get("state")  # fallback –¥–ª—è 'state'
        if status == "COMPLETED":
            output = data.get("output", {}) or data.get("data", {}).get("output", {})
            url_list = output.get("output_url_list", [])
            if url_list:
                # –∫–Ω–æ–ø–∫–∞ ¬´–ù–æ–≤–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞¬ª
                keyboard = [
    [InlineKeyboardButton("üëó –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–º–µ—Ä–∫—É", callback_data="try_on")],
]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_photo(
                    url_list[0],
                    caption="–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç üéâ",
                    reply_markup=reply_markup,
                )
            else:
                await update.message.reply_text("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ.")
            break
        elif status == "ERROR" or status == "FAILED":
            await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.")
            break
    else:
        await update.message.reply_text("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

    return ConversationHandler.END



# --- –û—Ç–º–µ–Ω–∞ ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# --- main ---
def main():
    application = ApplicationBuilder().token("TELEGRAM_TOKEN").build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            PHOTO_MODEL: [MessageHandler(filters.PHOTO, handle_model_photo)],
            PHOTO_CLOTHES: [MessageHandler(filters.PHOTO, handle_clothes_photo)],
            TEXT_PROMPT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_prompt),
                CommandHandler("skip", skip_prompt),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)

    application.run_polling()


if __name__ == "__main__":
    main()

